steps:
  # Step 1: Set up Terraform
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        terraform destroy -auto-approve
        terraform init
        terraform plan  -auto-approve
        terraform apply -auto-approve

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$_PROJECT_ID/smart_hire:latest', '.']

  # Step 3: Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$_PROJECT_ID/smart_hire:latest']

  # Step 4: Apply the Cloud Deploy configurations
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['deploy', 'apply', '--file=clouddeploy.yaml', '--region=us-central1']
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['deploy', 'apply', '--file=dev-target.yaml', '--region=us-central1']
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['deploy', 'apply', '--file=prod-target.yaml', '--region=us-central1']

  # Step 5: Deploy to Cloud Deploy pipeline
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'deploy', 'releases', 'create', 'smart-hire-release-$BUILD_ID',
      '--project', '$_PROJECT_ID',
      '--region', 'us-central1',
      '--delivery-pipeline', 'smart-hire-pipeline',
      '--images', 'smart_hire=gcr.io/$_PROJECT_ID/smart_hire:latest'
    ]

images:
  - 'gcr.io/$_PROJECT_ID/smart_hire:latest'

substitutions:
  _PROJECT_ID: $PROJECT_ID
  _SECRET_KEY: $GOOGLE_APPLICATION_CREDENTIALS
  _DB_HOST: $DB_HOST
  _DB_NAME: $DB_NAME
  _DB_USER: $DB_USER
  _DB_PASS: $DB_PASS

options:
  logging: CLOUD_LOGGING_ONLY
